<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS EKS on Neil Armitage</title><link>https://neilarmitage.com/categories/aws-eks/</link><description>Recent content in AWS EKS on Neil Armitage</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2023, Neil Armitage; all rights reserved.</copyright><lastBuildDate>Thu, 12 May 2022 08:11:08 +0000</lastBuildDate><atom:link href="https://neilarmitage.com/categories/aws-eks/index.xml" rel="self" type="application/rss+xml"/><item><title>Installing Karpenter</title><link>https://neilarmitage.com/post/karpenter/</link><pubDate>Thu, 12 May 2022 08:11:08 +0000</pubDate><guid>https://neilarmitage.com/post/karpenter/</guid><description>
Karpenter automatically launches just the right compute resources to handle your cluster's applications. It is designed to let you take full advantage of the cloud with fast and simple compute provisioning for Kubernetes clusters. It is a replacement for the Cluster Autoscaler which has some issues in AWS
Updated - 13/12/2022 : The installation is now easier with the new Terraform module - see here for an example
This at the moment this example does not work on an acloudguru sandbox account.</description></item><item><title>Basic EKS Cluster with Cluster Autoscaler</title><link>https://neilarmitage.com/post/basic-eks-cluster/</link><pubDate>Wed, 11 May 2022 10:38:08 +0000</pubDate><guid>https://neilarmitage.com/post/basic-eks-cluster/</guid><description>
EKSCTL can be used to quickly deploy a AWS EKS Cluster.
This is based on using a sandbox AWS account The supporting files can be found on Github
Create an EKS deployment file, I tend to create individual nodegroups dedicated to a single AZ
1 2[cloudshell-user@ip-10-1-181-252 cluster-autoscaler]$ cat ca-cluster.yaml 3 4--- 5apiVersion: eksctl.io/v1alpha5 6kind: ClusterConfig 7 8metadata: 9 name: ca-cluster 10--- 11apiVersion: eksctl.io/v1alpha5 12kind: ClusterConfig 13 14metadata: 15 name: ca-cluster 16 region: us-east-1 17 version: &amp;#34;1.</description></item><item><title>EKS with Cilium in chaining mode</title><link>https://neilarmitage.com/post/cilium-chaining/</link><pubDate>Wed, 11 May 2022 10:38:08 +0000</pubDate><guid>https://neilarmitage.com/post/cilium-chaining/</guid><description>
Cilium can run in chaining mode which allows it to run alongside the AWS-CNI plugin.
This is based on using a sandbox AWS account The supporting files can be found on Github
Install some extra tools
1curl -L --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz{,.sha256sum} 2sha256sum --check cilium-linux-amd64.tar.gz.sha256sum 3sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin 4rm cilium-linux-amd64.tar.gz{,.sha256sum} 5 6 7export HUBBLE_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/hubble/master/stable.txt) 8curl -L --remote-name-all https://github.com/cilium/hubble/releases/download/$HUBBLE_VERSION/hubble-linux-amd64.tar.gz{,.sha256sum} 9sha256sum --check hubble-linux-amd64.tar.gz.sha256sum 10sudo tar xzvfC hubble-linux-amd64.tar.gz /usr/local/bin 11rm hubble-linux-amd64.tar.gz{,.sha256sum} Deploy an EKS Cluster</description></item></channel></rss>