<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Personal Ramblings</title>
    <link>http://neilarmitage.com/posts/</link>
    <description>Recent content in Posts on My Personal Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Sep 2022 06:30:08 +0000</lastBuildDate><atom:link href="http://neilarmitage.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Avoiding pain when operating in the Cloud</title>
      <link>http://neilarmitage.com/posts/2022-09-14-cloudopen-europe-2022/</link>
      <pubDate>Wed, 14 Sep 2022 06:30:08 +0000</pubDate>
      
      <guid>http://neilarmitage.com/posts/2022-09-14-cloudopen-europe-2022/</guid>
      <description>I will be Speaking at the Open Source Summit Europe 2022 in Dublin
The slides can be found on SpeakerDeck.</description>
    </item>
    
    <item>
      <title>Kubernetes  Backup with Velero</title>
      <link>http://neilarmitage.com/posts/2022-07-29-k8s-backup-with-velero/</link>
      <pubDate>Fri, 29 Jul 2022 10:14:08 +0000</pubDate>
      
      <guid>http://neilarmitage.com/posts/2022-07-29-k8s-backup-with-velero/</guid>
      <description>Velero can being used for backup and recovery -
Installation via Terraform resource &amp;#34;aws_s3_bucket&amp;#34; &amp;#34;velero&amp;#34; { bucket = &amp;#34;eks-velero-backup-${var.environment_name}&amp;#34; acl = &amp;#34;private&amp;#34; server_side_encryption_configuration { rule { apply_server_side_encryption_by_default { sse_algorithm = &amp;#34;AES256&amp;#34; } } } versioning { enabled = true } } resource &amp;#34;aws_s3_bucket_policy&amp;#34; &amp;#34;velero&amp;#34; { bucket = aws_s3_bucket.velero.id policy = jsonencode({ Version = &amp;#34;2012-10-17&amp;#34; Id = &amp;#34;velero-${var.environment_name}-bucket-policy&amp;#34; Statement = [ { Sid = &amp;#34;EnforceTls&amp;#34; Effect = &amp;#34;Deny&amp;#34; Principal = &amp;#34;*&amp;#34; Action = &amp;#34;s3:*&amp;#34; Resource = [ &amp;#34;${aws_s3_bucket.</description>
    </item>
    
    <item>
      <title>Installing Karpenter</title>
      <link>http://neilarmitage.com/posts/2022-05-12-karpenter/</link>
      <pubDate>Thu, 12 May 2022 08:11:08 +0000</pubDate>
      
      <guid>http://neilarmitage.com/posts/2022-05-12-karpenter/</guid>
      <description>Karpenter automatically launches just the right compute resources to handle your cluster&amp;rsquo;s applications. It is designed to let you take full advantage of the cloud with fast and simple compute provisioning for Kubernetes clusters. It is a replacement for the Cluster Autoscaler which has some issues in AWS
This at the moment this example does not work on an acloudguru sandbox account. The supporting files can be found on Github</description>
    </item>
    
    <item>
      <title>Basic EKS Cluster with Cluster Autoscaler</title>
      <link>http://neilarmitage.com/posts/2022-05-11-basic-eks-cluster/</link>
      <pubDate>Wed, 11 May 2022 10:38:08 +0000</pubDate>
      
      <guid>http://neilarmitage.com/posts/2022-05-11-basic-eks-cluster/</guid>
      <description>EKSCTL can be used to quickly deploy a AWS EKS Cluster.
This is based on using a sandbox AWS account The supporting files can be found on Github
Create an EKS deployment file, I tend to create individual nodegroups dedicated to a single AZ
[cloudshell-user@ip-10-1-181-252 cluster-autoscaler]$ cat ca-cluster.yaml --- apiVersion: eksctl.io/v1alpha5 kind: ClusterConfig metadata: name: ca-cluster --- apiVersion: eksctl.io/v1alpha5 kind: ClusterConfig metadata: name: ca-cluster region: us-east-1 version: &amp;#34;1.22&amp;#34; availabilityZones: [&amp;#34;us-east-1a&amp;#34;, &amp;#34;us-east-1b&amp;#34;, &amp;#34;us-east-1c&amp;#34;] managedNodeGroups: - name: nodegroupA desiredCapacity: 1 availabilityZones: [&amp;#34;us-east-1a&amp;#34;] instanceType: t3.</description>
    </item>
    
    <item>
      <title>EKS with Cilium in chaining mode</title>
      <link>http://neilarmitage.com/posts/2022-05-11-cilium-chaining/</link>
      <pubDate>Wed, 11 May 2022 10:38:08 +0000</pubDate>
      
      <guid>http://neilarmitage.com/posts/2022-05-11-cilium-chaining/</guid>
      <description>Cilium can run in chaining mode which allows it to run alongside the AWS-CNI plugin.
This is based on using a sandbox AWS account The supporting files can be found on Github
Install some extra tools curl -L --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz{,.sha256sum} sha256sum --check cilium-linux-amd64.tar.gz.sha256sum sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin rm cilium-linux-amd64.tar.gz{,.sha256sum} export HUBBLE_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/hubble/master/stable.txt) curl -L --remote-name-all https://github.com/cilium/hubble/releases/download/$HUBBLE_VERSION/hubble-linux-amd64.tar.gz{,.sha256sum} sha256sum --check hubble-linux-amd64.tar.gz.sha256sum sudo tar xzvfC hubble-linux-amd64.tar.gz /usr/local/bin rm hubble-linux-amd64.tar.gz{,.sha256sum}
Deploy an EKS Cluster</description>
    </item>
    
    <item>
      <title>Using ACloudGuru AWS Sandboxes</title>
      <link>http://neilarmitage.com/posts/2022-05-08-acloudguru-sandbox/</link>
      <pubDate>Sun, 08 May 2022 14:38:08 +0000</pubDate>
      
      <guid>http://neilarmitage.com/posts/2022-05-08-acloudguru-sandbox/</guid>
      <description>Running your own AWS account for testing can lead to unexpected costs. Unless care is taken around securing the account, the account can be hijacked and used for other purposes. Personally Iâ€™ve stopped running my own accounts and moved to using the sandbox accounts provided by acloudguru as part of their Personal Plus subscription.
Most of the examples provided in the blog should run on these playgrounds with some exceptions. Generally the setup is using the AWS CloudShell within the sandbox account to remove any issue with local machine setups.</description>
    </item>
    
  </channel>
</rss>
